Starting satellites from earth

Target		vmin	vmax		max. Dauer
Mars:		8.5884	8.6623		5a
Jupiter:	9.1706	9.2189		5a
Saturn:		9.3840	9.4161		20a bei 6a: 9.4204
Uranus:		9.53855 9.55625		50a   duration: 28min
Neptun:		9.59955 tl 9.60955 th	50a
Pluto:		9.60285 9.65005		50a


//---Wrong values too early aborted
Uranus:		9.7378	9.8514		20a --- with 10 instead of 16
Neptun:		9.82795 9.85975		20a
Pluto:					20a

//Error: Uranus values: 2*inf as boundary values then segmentation fault
//Also for neptune and thus assumed for Pluto

Why is written in the command line satellite 0 crashed?
Modify driver(cashkarp) function to release satellites from earth at starting time

!!! Average calculating time for whole satellite subroutine ~ 27 min !!!
Problem in having just 1 acceleration function is matrix ~ sat * sat 1000 planets not possible to calculate due to memory alloc limits
acc_sat had only ~ sat*planets memory needed -> live with bad precision in sastellite file or include acc_sat again for sat_driver


/* To do:
 Programming part:
    -Write .csv/.txt -file with initialvalues for ~ 20-30 objects we want to consider with lines like: x, y, z, vx, vy, vz, m, r;
    -include massless (0.0) test object in Input.csv
    -Test 1d integrators for different functions and determine order of convergence with log-log-plot
    -calculate E_tot, E_pot, E_kin in driver functions and output them for conservation plot
    -calculate L_tot in driver functions and output it for conservation plot
    -calculate Laplace integral in driver functions and output it for conservation plot
    -implement adaptive stepsize control in the driver functions

    -Write a script for plots:
        -Energy
        -L
        -Laplace integral
        -trajectories in position space
        -trajectories in phase space
        (-trajectories in momentum space)
    -AnnÃ¤herungs effekte

 Theoretical foundations:
    -datatypes and their representation
    -numerical errors: their occurances and reduction
    -Swing by maneuver, write code for:
	-reaching Jupiter -> determine the start
		velocity
		angle in perspective to Jupiter
		time it takes to reach Jupiter
	-once Jupiter is reached -> determine the start
		velocity
		angle needed to cross the pluto Trajectory

    -idea of integrator schemes: from taylor-expansion to final formulas
    -representation of formulas in butcher tables and how to implement code from there
    -determining order of convergence (power laws) from log-log-plots
    (-post-newtonian/relativistic corrections)

 Other challenges:
    (-how to call c++ programms / functions from a python script)
    (-how to unify the plotting python scrips to a complete script that does programm execution, numerical analysis and plotting)
    -machine leaning approach to achieve initial values from ending position

 Latex:
	-personalize the template
	-define the structure and the order of topics and results
	-creating and chosing the plots for each topic
	-writing:
		-basics(integrators(euler, leapfrog, runge-kutta)
		-topic1
		-topic2
		-topic3
		-abstract
		-conclusion

  Test:
    -Unbeteiligte Planeten an/aus
    -Satellit losschicken und bei pluto ankommen  
*/